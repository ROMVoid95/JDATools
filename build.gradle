import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id("eclipse")
	id("java-library")
	id("maven-publish")
	id("signing")
	id "com.github.ben-manes.versions" version "0.39.0"
	id "com.github.johnrengelman.shadow" version "7.0.0"
}

version = "2.0.1"
group = 'com.readonlydev'
archivesBaseName = 'JDATools'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def javaVersion = JavaVersion.VERSION_17

sourceSets {
	test {
		java.srcDirs += 'src/test/java'
		compileClasspath += main.compileClasspath
		runtimeClasspath += main.runtimeClasspath
	}
}

apply from: 'dependencies.gradle'

repositories {
	mavenCentral()
}

dependencies {
	implementation jda()
	implementation slf4j()
	implementation lang3()
	implementation json()
	compileOnly 'org.projectlombok:lombok:1.18.22'
	annotationProcessor 'org.projectlombok:lombok:1.18.22'
	
	testCompileOnly 'org.projectlombok:lombok:1.18.22'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
}

def projectVersion = version.toString()
if(projectVersion.endsWith("SNAPSHOT")) {
	projectVersion = projectVersion.replace("-", ".")
}
def splitVerison = projectVersion.tokenize(".")

task sourcesForRelease(type: Copy) {
	from('src/main/java') {
		filter(ReplaceTokens, tokens: [
			MAJOR:		splitVerison.get(0),
			MINOR:    	splitVerison.get(1),
			PATCH:		splitVerison.get(2)
		])
	}
	into 'build/filteredSrc'
}

compileJava {
	source = sourcesForRelease.destinationDir
	classpath = sourceSets.main.compileClasspath

	dependsOn sourcesForRelease
}

configurations {
	implementation {
		description = 'implementation'
		transitive = true
	}
}

def setMainManifestProps = { Manifest manifest->
	manifest.mainAttributes ([
		'Implementation-Title':     archivesBaseName,
		'Implementation-Version':   version,
		'Implementation-Vendor':    'ReadOnly Development',
		'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
	])
}

task fullBuild {
	group 'jdatools'
	dependsOn 'clean'
	dependsOn 'build'
	tasks.findByName('build').mustRunAfter 'clean'
}

task fullPublishBuild {
	group 'jdatools'
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'publish'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('publish').mustRunAfter 'build'
}

javadoc {
	destinationDir = file("$buildDir/docs/")
	source = sourceSets.main.allJava
	classpath += configurations.compileClasspath
}

def majorJavaVersion = javaVersion.getMajorVersion()

javadoc.options {
	addStringOption('Xdoclint:none', '-quiet')
	docTitle = windowTitle = archivesBaseName + ' | ' + projectVersion
	encoding = 'UTF-8'
	memberLevel = JavadocMemberLevel.PROTECTED
	tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
	links = ["https://docs.oracle.com/en/java/javase/${majorJavaVersion}/docs/api".toString()]
}

jar {
	archiveClassifier.set('lite')
	manifest(setMainManifestProps)
}

shadowJar {
  	classifier = ''
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

build {
	dependsOn { clean }
	dependsOn { javadocJar }
	dependsOn { shadowJar }
}

artifacts {
	archives jar
	archives sourcesJar
	archives javadocJar
	archives shadowJar
}

signing {
    sign configurations.archives
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			customizePom(pom)
		
			groupId = project.group
			version = project.version
			artifactId = 'jdatools'
			
			artifact jar
			artifact sourcesJar
			artifact javadocJar
			artifact shadowJar

		}
	}

	repositories {
		maven {
			def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
			url = project.version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
			credentials {
				username = ossrhUsername
				password = ossrhPassword
			}
		}
	}
	
	signing {
    	publishing.publications.each {
    	    sign it
    	}
    }
}

def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'JDA Utility Library'
            name 'JDATools'
            url 'https://github.com/ReadOnlyDevelopment/JDATools'
            issueManagement {
                system 'GitHub'
                url 'https://github.com/ReadOnlyDevelopment/JDATools/issues'
            }
            licenses {
                license {
					name 'MIT'
					url 'https://github.com/ReadOnlyDevelopment/JDATools/master/LICENSE'
					distribution 'repo'
                }
            }
            scm {
				url 'https://github.com/ReadOnlyDevelopment/JDATools'
				connection 'scm:git:git://github.com/ReadOnlyDevelopment/JDATools.git'
				developerConnection 'scm:git:git@github.com:ReadOnlyDevelopment/JDATools.git'
            }
            developers {
                developer {
                    name 'ROMVoid95'
                    id 'romvoid95'
					email 'romvoid95@readonlydev.com'
                }
            }
        }
    }
}

model {
    tasks.generatePomFileForMavenJavaPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
}
