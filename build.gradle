import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar
import org.apache.tools.ant.filters.ReplaceTokens
import com.vanniktech.maven.publish.SonatypeHost

plugins {
    id 'eclipse'
    id 'java-library'
    id "com.vanniktech.maven.publish" version "0.19.0"
    id "com.github.ben-manes.versions" version "0.42.0"
    id "com.github.johnrengelman.shadow" version "7.1.2"
}

version = "2.1.4"
group = 'com.readonlydev'
archivesBaseName = 'JDATools'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def javaVersion = JavaVersion.VERSION_17

sourceSets {
    test {
        java.srcDirs += 'src/test/java'
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
}

dependencies {
    implementation jda()
    implementation log4j()
    implementation lang3()
    implementation json()
    implementation reflections()
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}

def projectVersion = version.toString()
if(projectVersion.endsWith("SNAPSHOT")) {
    projectVersion = projectVersion.replace("-", ".")
}
def splitVerison = projectVersion.tokenize(".")

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        filter(ReplaceTokens, tokens: [
            MAJOR:	splitVerison.get(0),
            MINOR:    	splitVerison.get(1),
            PATCH:      splitVerison.get(2)
        ])
    }
    into 'build/filteredSrc'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    source = sourcesForRelease.destinationDir
    classpath = sourceSets.main.compileClasspath

    dependsOn sourcesForRelease
}

configurations {
    implementation {
        description = 'implementation'
        transitive = true
    }
}

def setMainManifestProps = { Manifest manifest->
    manifest.mainAttributes ([
        'Implementation-Title':     archivesBaseName,
        'Implementation-Version':   version,
        'Implementation-Vendor':    'ReadOnly Development',
        'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

task fullBuild {
    group 'jdatools'
    dependsOn 'clean'
    dependsOn 'build'
    tasks.findByName('build').mustRunAfter 'clean'
}

def majorJavaVersion = javaVersion.getMajorVersion()

javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.setWindowTitle(archivesBaseName + ' | ' + projectVersion)
    options.setDocTitle(archivesBaseName + ' | ' + projectVersion)
    options.setEncoding('UTF-8')
    options.setMemberLevel(JavadocMemberLevel.PROTECTED)
    options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
    options.links = [
        "https://docs.oracle.com/en/java/javase/${majorJavaVersion}/docs/api".toString()
    ]

    destinationDir = file("$buildDir/docs/")
    source = sourceSets.main.allJava
    classpath += configurations.compileClasspath
}

jar {
    archiveClassifier.set('lite')
    manifest(setMainManifestProps)
}

shadowJar {
    classifier = ''
}

build {
    dependsOn { clean }
    dependsOn { javadocJar }
    dependsOn { shadowJar }
}

mavenPublishing {
    publishToMavenCentral(SonatypeHost.S01)
    signAllPublications()
    pomFromGradleProperties()
}

task fullRelease {
    group 'jdatools'
    dependsOn 'publish'
    dependsOn 'closeAndReleaseRepository'
    tasks.findByName('closeAndReleaseRepository').mustRunAfter 'publish'
}