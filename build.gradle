plugins {
    id 'eclipse'
    id 'java-library'
    id "com.github.ben-manes.versions" version "0.42.0"
    id 'signing'
    id 'maven-publish'
    id "io.freefair.lombok" version "6.6.1"
}

def baseVersion = "4.0.0"
def isSnapshot = false

version = (isSnapshot) ? baseVersion + '-SNAPSHOT.' + getBuildNumber() : baseVersion
group = 'com.readonlydev'
archivesBaseName = 'jdatools'

import org.apache.tools.ant.filters.ReplaceTokens

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

def javaVersion = JavaVersion.VERSION_17

apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
}

dependencies {
    api jda() {
		exclude module: 'opus-java'
	}
    api guava()
    api lang3()
    implementation json()
    api jacksonCore()
    api jacksonDatabind()
    api jacksonAnnotations()
}

def projectVersion = version.toString()
if(projectVersion.endsWith("SNAPSHOT")) {
    projectVersion = projectVersion.replace("-", ".")
}
def splitVerison = projectVersion.tokenize(".")

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        filter(ReplaceTokens, tokens: [
            MAJOR:	splitVerison.get(0),
            MINOR:  splitVerison.get(1),
            PATCH:  splitVerison.get(2)
        ])
    }
    into 'build/filteredSrc'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    source = sourcesForRelease.destinationDir
    classpath += sourceSets.main.compileClasspath

    dependsOn sourcesForRelease
}

def setMainManifestProps = { Manifest manifest->
    manifest.mainAttributes ([
        'Implementation-Title':     archivesBaseName,
        'Implementation-Version':   version,
        'Implementation-Vendor':    'ReadOnly Development',
        'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

task fullBuild {
    group 'jdatools'
    dependsOn 'clean'
    dependsOn 'build'
    dependsOn 'publishToMavenLocal'
    tasks.findByName('build').mustRunAfter 'clean'
    tasks.findByName('publishToMavenLocal').mustRunAfter 'build'
}

def majorJavaVersion = javaVersion.getMajorVersion()

javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.setWindowTitle(archivesBaseName + ' | ' + projectVersion)
    options.setDocTitle(archivesBaseName + ' | ' + projectVersion)
    options.setEncoding('UTF-8')
    options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
}

artifacts {
	archives jar
}

String getBuildNumber() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        return versionProps['build_num'].toString()
    }
    return "1"
}

task incrementBuild {
    doFirst {
        def versionFile = file('version.properties')
        if (versionFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionFile))
            def num = versionProps['build_num'].toInteger() + 1
            println("incrementing BuildNumber to: " + num)
            versionProps['build_num'] = num.toString()
            versionProps.store(versionFile.newWriter(), null)
        } else {
            println("version.properties file not found! Ignoring.")
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	from components.java
        }
    }
}

tasks.publishToMavenLocal.finalizedBy incrementBuild
