plugins {
	id 'maven-publish'
	id 'java-library'
    id 'eclipse'
    id 'signing'
	alias(libs.plugins.versions)
	alias(libs.plugins.licenser)
	alias(libs.plugins.lombok)
}

def baseVersion = "4.0.3"
def isSnapshot = false

version = (isSnapshot) ? baseVersion + '-SNAPSHOT' : baseVersion
group = 'io.github.readonly'
archivesBaseName = 'JDATools'

java {
	withJavadocJar()
	withSourcesJar()
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

repositories {
    mavenCentral()
}

dependencies {
	api(libs.jda) { exclude module: 'opus-java' }
	implementation libs.json
	api libs.slf4j
    api libs.guava
    api libs.guice
    api libs.commons.lang3
    api libs.jackson.core
    api libs.jackson.databind
    api libs.jackson.annotations
}

license {
	header = rootProject.file("HEADER.txt")
	include '**/*.java'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    classpath += sourceSets.main.compileClasspath
}

def setMainManifestProps = { Manifest manifest->
    manifest.mainAttributes ([
        'Implementation-Title':     archivesBaseName,
        'Implementation-Version':   version,
        'Implementation-Vendor':    'ReadOnly Development',
        'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.setWindowTitle(archivesBaseName + ' | ' + version)
    options.setDocTitle(archivesBaseName + ' | ' + version)
    options.setEncoding('UTF-8')
    options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	from components.java
        	groupId = 'com.github.ReadOnlyDevelopment'
        }
        mavenSnapshot(MavenPublication) {
            from components.java
            version = "master-SNAPSHOT"
            groupId = 'com.github.ReadOnlyDevelopment'
        }

    }
}

checkLicenseMain.dependsOn licenseFormat
