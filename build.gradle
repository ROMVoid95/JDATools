plugins {
	id "com.github.ben-manes.versions" version "0.42.0"
	id "org.cadixdev.licenser" version "0.6.1"
	id "io.freefair.lombok" version "6.6.1"
	id 'maven-publish'
	id 'java-library'
    id 'eclipse'
    id 'signing'
}

def baseVersion = "4.0.0"
def isSnapshot = false

version = (isSnapshot) ? baseVersion + '-SNAPSHOT' : baseVersion
group = 'com.readonlydev'
archivesBaseName = 'JDATools'

import org.apache.tools.ant.filters.ReplaceTokens

java {
	withJavadocJar()
	withSourcesJar()
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

apply from: 'dependencies.gradle'

repositories {
    mavenCentral()
}

dependencies {
    api jda() {
		exclude module: 'opus-java'
	}
    api guava()
    api lang3()
    implementation json()
    api jacksonCore()
    api jacksonDatabind()
    api jacksonAnnotations()
}

license {
	header = rootProject.file("HEADER.txt")
	include '**/*.java'
}

task sourcesForRelease(type: Copy) {
    from('src/main/java') {
        filter(ReplaceTokens, tokens: [ VERSION: version ])
    }
    into 'build/filteredSrc'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    source = sourcesForRelease.destinationDir
    classpath += sourceSets.main.compileClasspath

    dependsOn sourcesForRelease
}

def setMainManifestProps = { Manifest manifest->
    manifest.mainAttributes ([
        'Implementation-Title':     archivesBaseName,
        'Implementation-Version':   version,
        'Implementation-Vendor':    'ReadOnly Development',
        'Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])
}

javadoc {
    options.addBooleanOption('html5', true)
    options.addStringOption('Xdoclint:none', '-quiet')
    options.setWindowTitle(archivesBaseName + ' | ' + version)
    options.setDocTitle(archivesBaseName + ' | ' + version)
    options.setEncoding('UTF-8')
    options.tags 'apiNote:a:API Note:', 'implSpec:a:Implementation Requirements:', 'implNote:a:Implementation Note:'
}

artifacts {
	archives jar
	archives javadocJar
	archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
        	from components.java
        }
    }
}

checkLicenseMain.dependsOn licenseFormat
